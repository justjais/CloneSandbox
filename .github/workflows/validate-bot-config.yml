name: Validate Bot Configuration

on:
  pull_request:
    paths:
      - '.github/bot-config.yml'
    types: [opened, synchronize, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install YAML validator
        run: |
          npm init -y --type=module
          npm install js-yaml ajv ajv-formats
          
      - name: Create validation schema
        run: |
          cat > bot-config-schema.json << 'EOF'
          {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "PR Merge Bot Configuration",
            "type": "object",
            "required": ["bot_config"],
            "properties": {
              "bot_config": {
                "type": "object",
                "required": ["bot_name", "enabled"],
                "properties": {
                  "bot_name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "merge": {
                    "type": "object",
                    "properties": {
                      "required_approvals": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 10
                      },
                      "require_conversation_resolution": {
                        "type": "boolean"
                      },
                      "require_status_checks": {
                        "type": "boolean"
                      },
                      "required_status_checks": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "merge_method": {
                        "type": "string",
                        "enum": ["merge", "squash", "rebase"]
                      },
                      "delete_branch_after_merge": {
                        "type": "boolean"
                      },
                      "max_pr_age_days": {
                        "type": "integer",
                        "minimum": 0
                      }
                    }
                  },
                  "branch_protection": {
                    "type": "object",
                    "properties": {
                      "protected_branches": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "dismiss_stale_reviews": {
                        "type": "boolean"
                      },
                      "require_up_to_date_branches": {
                        "type": "boolean"
                      },
                      "require_linear_history": {
                        "type": "boolean"
                      },
                      "allow_force_pushes": {
                        "type": "boolean"
                      },
                      "allow_deletions": {
                        "type": "boolean"
                      }
                    }
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "bypass_users": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "bypass_teams": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "config_editors": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "min_approval_role": {
                        "type": "string",
                        "enum": ["read", "triage", "write", "maintain", "admin"]
                      }
                    }
                  },
                  "triggers": {
                    "type": "object",
                    "properties": {
                      "auto_merge_labels": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "skip_labels": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "merge_drafts": {
                        "type": "boolean"
                      },
                      "trusted_users": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "notifications": {
                    "type": "object",
                    "properties": {
                      "notify_on_merge": {
                        "type": "boolean"
                      },
                      "notify_on_failure": {
                        "type": "boolean"
                      },
                      "slack_webhook": {
                        "type": "string",
                        "format": "uri"
                      },
                      "teams_webhook": {
                        "type": "string",
                        "format": "uri"
                      }
                    }
                  },
                  "file_restrictions": {
                    "type": "object",
                    "properties": {
                      "sensitive_files": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "sensitive_files_additional_approvals": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "blocked_paths": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "limits": {
                    "type": "object",
                    "properties": {
                      "max_changed_files": {
                        "type": "integer",
                        "minimum": 1
                      },
                      "max_lines_changed": {
                        "type": "integer",
                        "minimum": 1
                      },
                      "max_pr_size_bytes": {
                        "type": "integer",
                        "minimum": 1
                      },
                      "size_check_exempt_extensions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "timing": {
                    "type": "object",
                    "properties": {
                      "allowed_hours": {
                        "type": "object",
                        "required": ["start", "end"],
                        "properties": {
                          "start": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 23
                          },
                          "end": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 23
                          }
                        }
                      },
                      "allowed_days": {
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 6
                        }
                      },
                      "timezone": {
                        "type": "string"
                      },
                      "min_open_time_minutes": {
                        "type": "integer",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "config_version": {
                "type": "string"
              },
              "last_updated": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "updated_by": {
                    "type": "string"
                  },
                  "reason": {
                    "type": "string"
                  }
                }
              }
            }
          }
          EOF

      - name: Validate YAML syntax
        run: |
          echo "Validating YAML syntax..."
          if ! js-yaml .github/bot-config.yml > /dev/null 2>&1; then
            echo "❌ YAML syntax is invalid"
            js-yaml .github/bot-config.yml
            exit 1
          else
            echo "✅ YAML syntax is valid"
          fi

      - name: Create validation script
        run: |
          cat > validate-config.js << 'EOF'
          import yaml from 'js-yaml';
          import Ajv from 'ajv';
          import addFormats from 'ajv-formats';
          import fs from 'fs';

          function validateConfig() {
            try {
              // Load and parse configuration
              console.log('Loading configuration file...');
              const configContent = fs.readFileSync('.github/bot-config.yml', 'utf8');
              const config = yaml.load(configContent);

              // Load schema
              console.log('Loading validation schema...');
              const schema = JSON.parse(fs.readFileSync('bot-config-schema.json', 'utf8'));

              // Setup validator
              const ajv = new Ajv({ allErrors: true });
              addFormats(ajv);
              const validate = ajv.compile(schema);

              // Validate
              console.log('Validating configuration...');
              const valid = validate(config);

              if (!valid) {
                console.log('❌ Configuration validation failed:');
                validate.errors.forEach(error => {
                  console.log(`  - ${error.instancePath || 'root'}: ${error.message}`);
                  if (error.data !== undefined) {
                    console.log(`    Current value: ${JSON.stringify(error.data)}`);
                  }
                });
                process.exit(1);
              }

              // Additional custom validations
              console.log('Running additional validations...');
              
              // Check that timing hours make sense
              if (config.bot_config.timing?.allowed_hours) {
                const start = config.bot_config.timing.allowed_hours.start;
                const end = config.bot_config.timing.allowed_hours.end;
                if (start >= end) {
                  console.log('❌ allowed_hours.start must be less than allowed_hours.end');
                  process.exit(1);
                }
              }

              // Check that required_approvals is reasonable
              if (config.bot_config.merge?.required_approvals > 5) {
                console.log('⚠️  Warning: required_approvals > 5 may be impractical for most teams');
              }

              // Check that auto-merge labels and skip labels don't overlap
              const autoLabels = config.bot_config.triggers?.auto_merge_labels || [];
              const skipLabels = config.bot_config.triggers?.skip_labels || [];
              const overlap = autoLabels.filter(label => skipLabels.includes(label));
              
              if (overlap.length > 0) {
                console.log(`❌ Labels appear in both auto_merge_labels and skip_labels: ${overlap.join(', ')}`);
                process.exit(1);
              }

              // Validate webhook URLs if provided
              const webhooks = ['slack_webhook', 'teams_webhook'];
              for (const webhook of webhooks) {
                const url = config.bot_config.notifications?.[webhook];
                if (url && url !== '' && !url.startsWith('http')) {
                  console.log(`❌ ${webhook} must be a valid HTTP/HTTPS URL`);
                  process.exit(1);
                }
              }

              console.log('✅ Configuration validation passed!');
              console.log('\nConfiguration Summary:');
              console.log(`- Bot enabled: ${config.bot_config.enabled}`);
              console.log(`- Required approvals: ${config.bot_config.merge?.required_approvals || 1}`);
              console.log(`- Merge method: ${config.bot_config.merge?.merge_method || 'merge'}`);
              console.log(`- Protected branches: ${(config.bot_config.branch_protection?.protected_branches || []).join(', ')}`);

            } catch (error) {
              console.log('❌ Validation error:', error.message);
              process.exit(1);
            }
          }

          validateConfig();
          EOF

      - name: Validate configuration
        run: |
          node validate-config.js

      - name: Check for sensitive file modifications
        run: |
          echo "Checking for modifications to sensitive files..."
          git diff --name-only HEAD~1..HEAD | grep -E "^\.github/(workflows/|bot-config\.yml)" || true
          
          # If bot-config.yml is being modified, add extra validation
          if git diff --name-only HEAD~1..HEAD | grep -q "\.github/bot-config\.yml"; then
            echo "⚠️  Bot configuration is being modified - extra validation required"
            
            # Check if the change increases security (fewer bypasses, more restrictions)
            echo "Validating security implications..."
            
            # Extract critical values for comparison
            OLD_APPROVALS=$(git show HEAD~1:.github/bot-config.yml 2>/dev/null | yq '.bot_config.merge.required_approvals // 1' || echo "1")
            NEW_APPROVALS=$(yq '.bot_config.merge.required_approvals // 1' .github/bot-config.yml)
            
            echo "Required approvals: $OLD_APPROVALS → $NEW_APPROVALS"
            
            if [ "$NEW_APPROVALS" -lt "$OLD_APPROVALS" ]; then
              echo "⚠️  WARNING: Required approvals decreased from $OLD_APPROVALS to $NEW_APPROVALS"
              echo "This change reduces the security requirements for automatic merging."
            fi
            
            # Check if bot is being disabled
            OLD_ENABLED=$(git show HEAD~1:.github/bot-config.yml 2>/dev/null | yq '.bot_config.enabled // true' || echo "true")
            NEW_ENABLED=$(yq '.bot_config.enabled // true' .github/bot-config.yml)
            
            echo "Bot enabled: $OLD_ENABLED → $NEW_ENABLED"
            
            if [ "$OLD_ENABLED" = "true" ] && [ "$NEW_ENABLED" = "false" ]; then
              echo "⚠️  WARNING: Bot is being disabled"
            fi
          fi

      - name: Generate validation report
        if: always()
        run: |
          cat > validation-report.md << 'EOF'
          ## Bot Configuration Validation Report

          ### Validation Results
          - ✅ YAML syntax validation passed
          - ✅ Schema validation passed
          - ✅ Custom validation rules passed

          ### Configuration Summary
          EOF
          
          # Add configuration summary to report
          echo "- **Bot Name**: $(yq '.bot_config.bot_name' .github/bot-config.yml)" >> validation-report.md
          echo "- **Enabled**: $(yq '.bot_config.enabled' .github/bot-config.yml)" >> validation-report.md
          echo "- **Required Approvals**: $(yq '.bot_config.merge.required_approvals // 1' .github/bot-config.yml)" >> validation-report.md
          echo "- **Merge Method**: $(yq '.bot_config.merge.merge_method // "merge"' .github/bot-config.yml)" >> validation-report.md
          echo "- **Delete Branch After Merge**: $(yq '.bot_config.merge.delete_branch_after_merge // true' .github/bot-config.yml)" >> validation-report.md
          
          echo "" >> validation-report.md
          echo "### Protected Branches" >> validation-report.md
          yq '.bot_config.branch_protection.protected_branches[]' .github/bot-config.yml | sed 's/^/- /' >> validation-report.md
          
          echo "" >> validation-report.md
          echo "### Auto-merge Labels" >> validation-report.md
          if [ "$(yq '.bot_config.triggers.auto_merge_labels | length' .github/bot-config.yml)" -gt 0 ]; then
            yq '.bot_config.triggers.auto_merge_labels[]' .github/bot-config.yml | sed 's/^/- /' >> validation-report.md
          else
            echo "- *No auto-merge labels configured*" >> validation-report.md
          fi
          
          echo "" >> validation-report.md
          echo "### Skip Labels" >> validation-report.md
          if [ "$(yq '.bot_config.triggers.skip_labels | length' .github/bot-config.yml)" -gt 0 ]; then
            yq '.bot_config.triggers.skip_labels[]' .github/bot-config.yml | sed 's/^/- /' >> validation-report.md
          else
            echo "- *No skip labels configured*" >> validation-report.md
          fi

          echo "📋 Validation report generated"

      - name: Comment validation report
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = fs.readFileSync('validation-report.md', 'utf8');
              
              // Find existing validation comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const existingComment = comments.data.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('Bot Configuration Validation Report')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: report
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: report
                });
              }
            } catch (error) {
              console.error('Failed to post validation report:', error);
            }

